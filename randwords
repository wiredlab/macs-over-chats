#!/bin/bash

# (C) 2020 Dan White
# MIT License https://opensource.org/licenses/MIT

# TODO
# * make last digit a check digit to enable forward error detection
#   This looks like a good option:
#   https://en.wikipedia.org/wiki/Luhn_mod_N_algorithm




# good practices boilerplate
set -o errexit
set -o pipefail
set -o nounset
#set -o xtrace


function usage() {
    cat << EOF
Usage: $(basename ${0}) [-r min,max] [-n number] [-1] [words.txt]
    Output random words.  Defaults to one line of one word.
    words.txt has a line format of:  rank count word
    (default word list is gsl.txt)

    -r j,k  range of word lengths [,k up to] [j, at least] [j,k range]
    -n  number of words
    -1  one word per line (default: one space-separated line)
EOF
}


NWORDS=1
OPT_ONELINE=true

declare -a ARGV

while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help)
            usage
            exit 1
            ;;
        -r|--length)
            #IFS=',' read -a RANGE <<< " ${2-}"
            mapfile -t -d , RANGE < <(printf "%s\0" "${2-}")
            shift 2
            ;;
        -n)
            NWORDS="${2-1}"
            shift 2
            ;;
        -1)
            OPT_ONELINE=false
            shift
            ;;
        *)
            ARGV+=("$1")
            shift
            ;;
    esac
done

if [ -f "${ARGV[0]-}" ]; then
    wordfile="${ARGV[0]}"
else
    wordfile="gsl.txt"
fi

# provide defaults for empty min and max
NMIN="${RANGE[0]-}"
NMIN=$(( NMIN > 1 ? NMIN : 1))

NMAX="${RANGE[1]-}"
NMAX=$(( NMAX < NMIN ? 999 : NMAX))


# 3-column input file format:
#   rank count word
cat ${wordfile} \
    | awk "length(\$3) >= $NMIN && length(\$3) <= $NMAX {print \$3}" \
    | shuf \
    | head -n ${NWORDS-1} \
    | if $OPT_ONELINE; then tr '\n' ' '; else cat; fi
echo

